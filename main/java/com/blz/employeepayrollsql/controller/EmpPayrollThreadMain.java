/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package com.blz.employeepayrollsql.controller;

import java.time.LocalDate;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.logging.*;

import com.blz.employeepayrollsql.model.CustomThreadException;
import com.blz.employeepayrollsql.model.EmpPayrollDBServiceThread;
import com.blz.employeepayrollsql.model.Employee;

public class EmpPayrollThreadMain {
	private static Logger log = Logger.getLogger(EmpPayrollThreadMain.class.getName());

	public enum IOService {
		CONSOLE_IO, FILE_IO, DB_IO, REST_IO;
	}

	private List<Employee> empPayrollList;
	private EmpPayrollDBServiceThread empPayrollDBServicebj;

	// Creating Singleton object of EmpPayrollDBService
	public EmpPayrollThreadMain() {
		empPayrollDBServicebj = EmpPayrollDBServiceThread.getInstance();
	}

	public EmpPayrollThreadMain(List<Employee> empPayrollList) {
		this();
		this.empPayrollList = empPayrollList;
	}

	public List<Employee> readEmployeePayrollData(IOService ioService) throws CustomThreadException {
		if (ioService.equals(IOService.DB_IO)) {
			this.empPayrollList = empPayrollDBServicebj.readData();
		}
		return this.empPayrollList;
	}

	public void addEmployeeToPayrollDB(List<Employee> employeeList) {
		employeeList.forEach(employeeData -> {
			System.out.println("Employee being added : " + employeeData.name);
			try {
				this.addEmployeeToPayrollDatabase(employeeData.emp_id, employeeData.name, employeeData.gender,
						employeeData.salary, employeeData.startDate);
			} catch (CustomThreadException e) {
				e.printStackTrace();
			}
			System.out.println("Employee added : " + employeeData.name);
		});
		System.out.println(this.empPayrollList);
	}

	public void addEmployeeToPayrollWithThreads(List<Employee> employeePayrollDataList) {
		Map<Integer, Boolean> employeeAdditionStatus = new HashMap<>();
		employeePayrollDataList.forEach(employeePayrollData -> {
			Runnable task = () -> {
				employeeAdditionStatus.put(employeePayrollData.hashCode(), false);
				System.out.println("Employee being added : " + Thread.currentThread().getName());
				try {
					this.addEmployeeToPayrollDatabase(employeePayrollData.emp_id, employeePayrollData.name, employeePayrollData.gender,
							employeePayrollData.salary, employeePayrollData.startDate);
				} catch (CustomThreadException e) {
					e.printStackTrace();
				}
				employeeAdditionStatus.put(employeePayrollData.hashCode(), true);
				System.out.println("Employee added : " + Thread.currentThread().getName());
			};
			Thread thread = new Thread(task, employeePayrollData.name);
			thread.start();
		});
		while (employeeAdditionStatus.containsValue(false)) {
			try {
				Thread.sleep(10);
			} catch (InterruptedException e) {
			}
		}
		System.out.println(this.empPayrollList);
	}

	private void addEmployeeToPayrollDatabase(int emp_id, String name, String gender, double salary,
			LocalDate startDate) throws CustomThreadException {
		empPayrollList.add(empPayrollDBServicebj.addEmployeeToPayrollDB(emp_id, name, gender, salary, startDate));
	}

	public long countEntries(IOService ioService) {
		if (ioService.equals(IOService.DB_IO))
			return empPayrollList.size();
		return 0;
	}
}
